<< Отчёт о проведении тестов >>


Device specifications:
• Processor: Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz   1.80 GHz
• Installed RAM: 8,00 GB (7,90 GB usable)
• System: Windows 10 Pro (ver. 21H1)
• System type: 64-bit operating system, x64-based processor


Каждый из замеров теста проведён 6 раз, после чего посчитано среднее время поиска.

• ТЕСТ 1. Увеличение длины строки, в которой ищется подстрока (brute force).
В тексте романа «Война и мир» Толстого найти подстроку «князь Андрей».

- Время поиска в Томе I: ~24 миллисекунды
- Время поиска в Томах I-II: ~31 миллисекунда
- Время поиска в Томах I-III: ~32 миллисекунд
- Время поиска в Томах I-IV: ~36 миллисекунд

ВЫВОД:
Проведённые тесты показывают, что время поиска линейно растёт с увеличением длины строки.


• ТЕСТ 2. Увеличение длины искомой подстроки (brute force).
В тексте романа «Война и мир» Толстого найти последовательно подстроки «князь», «князь Андрей»,
«князь Андрей Болконский».

- Сравнить время поиска. 
- Соотносится ли время поиска как 5 : 12 : 23?
- Объяснить результат. Как это согласуется (не согласуется) с общей теорией?

- Время поиска в Томах подстроки «князь»: ~35 миллисекунд
- Время поиска в Томах подстроки «князь Андрей»: ~39 миллисекунд
- Время поиска в Томах подстроки «князь Болконский»: ~31 миллисекунда

ВЫВОД:
Время поиска в проведённых тестах оказалось практически одинаковым, следовательно, оно не соотностися
как 5 : 12 : 23. Из полученных результатов можно сделать вывод, что если длина исходной строки много
больше, чем длина искомой подстроки, то незначительное изменение длины подстроки не влияет на время поиска,
т.е. на сложность алгоритма.

Тесты с другими подстроками также подтверждают сделанный выше вывод:
- Время поиска в Томах подстроки «фортификация которых производилась»: ~41 миллисекунда
- Время поиска в Томах подстроки « которых производилсь»: ~45 миллисекунд


• ТЕСТ 3. Сравнение brute force и хэшей.
Дана строка: миллион букв а. Даны подстроки: Т1 = и a..a(100 раз)b и Т2 = ba..a(100 раз)

- Сравнить время работы двух вариантов поиска (brute force и хэти) в каждом из случаев.
- Результаты объяснить. Правда ли, что хэши всегда быстрее brute force?

- Время поиска Т1 (brute force): ~615 миллисекунд
- Время поиска Т1 (hash): ~621 миллисекунд

- Время поиска Т2 (brute force): ~13 миллисекунд
- Время поиска Т2 (hash): ~40 миллисекунд

ВЫВОД:
Тесты показали, что в первом случае Brute Force и Hash оказываются примерно одинаковы по времени выполнения,
а во втором случае Brute Force и вовсе обходит Hash по скорости. 

Почему так происходит?
- В первом случае, как я полагаю, выигранное хэшами на время на том, что алгоритм не сравнивает
посимвольно подстроку для каждой новой итерации цикла, теряется на подсчёте этих самых хэшей. Таким образом
получается, что хэши не сильно эффективнее brute force в некоторых ситуациях.

- Во втором случае смоделирована такая ситуация, когда brute force отрабатывает явно эффективнее, за счёт
того что при посимвольном сравнении он понимает, что строки не совпадают по первому же символу. А алгоритм,
использующий хэши, в то же время для каждой новой подстроки считает новый хэш, на что и тратится много времени.
Значит, что хэши не всегда быстрее brute force. Однако, согласно словам лучшего в мире преподавателя
Солодушкина Святослава Игоревича, такая ситуация на практике встречаются чуть чаще, чем никогда, и хэши
в большинстве случаев оказываются эффективнее. 
